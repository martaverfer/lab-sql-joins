USE sakila;

-- List the number of films per category
SELECT c.name, COUNT(fc.film_id) AS number_films
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;

-- Retrieve the store ID, city, and country for each store
SELECT s.store_id, ct.city, co.country
FROM store s
LEFT JOIN address a ON s.address_id = a.address_id
JOIN city ct ON a.city_id = ct.city_id
JOIN country co ON ct.country_id = co.country_id
GROUP BY s.store_id, ct.city;

-- Calculate the total revenue generated by each store in dollars
SELECT s.store_id, SUM(p.amount) AS total_amount
FROM store s
LEFT JOIN customer cu ON s.store_id = cu.store_id
JOIN payment p ON cu.customer_id = p.customer_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category
SELECT c.name, AVG(f.length) AS average_running_time
FROM category c
LEFT JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name;

-- BONUS
-- Identify the film categories with the longest average running time.
SELECT c.name, AVG(f.length) AS average_running_time
FROM category c
LEFT JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_running_time DESC;

-- Display the top 10 most frequently rented movies in descending order
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1
SELECT f.title, s.store_id
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN store s ON i.store_id = s.store_id
WHERE f.title LIKE "Academy Dinosaur" AND s.store_id = 1
GROUP BY s.store_id, f.title;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."
SELECT f.title,
       CASE 
           WHEN i.film_id IS NOT NULL THEN 'Available'
           ELSE 'NOT available'
       END AS Availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.title, Availability
ORDER BY Availability;

